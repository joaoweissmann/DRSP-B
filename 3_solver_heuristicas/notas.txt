-----------------------------------
O problema/modelo

Dado um conjunto de projetos que podem ser executados, onde cada projeto tem um lucro, um custo, um tempo de execução, localização, etc...; e um conjunto de sondas que podem ser usadas para executar projetos, o objetivo é escolher os projetos a serem executados pelas sondas de forma a maximizar o lucro total, dado um limite de custo total.

Cada sonda pode executar tarefas ao longo de um período máximo de 5 anos. 

Cada projeto tem uma data mínima e uma data máxima em que pode ser executado, assim como um tempo de execução.

O tempo de deslocamento entre projetos é não disprezível e fornecido com cálculo proporcional as respectivas distâncias.

Então os projetos devem ser escolhidos e alocados nas sondas de forma que cada sonda executará uma sequência/cronograma de projetos no tempo.

-----------------------------------
Algoritmos

- construção heurística

    Heurística para construir uma solução

    while (não restrito)
        escolher projeto não alocado
        for (sondas)
            busca janela viável na sonda
            se (janela existe)
                escolher intervalo para alocação
                inserir
                break
    
    Observação: inserir na primeira opção ou fazer alguma escolha heurística?

- escolher projeto não alocado

    Escolha gulosa e probabilística: uso de uma lista restrita de candidatos calibrada por um parâmetro alpha.

- busca janela viável na sonda

    for (alocações de uma sonda)
        getDesloc()
        getDeltaDesloc()
        se (tamanho da janela é suficiente)
            escolheIntervalo()
            se (desloc não muda)
                alocar()
            se (desloc diminui)
                alocar()
            se (desloc aumenta)
                tentaColocarDiferencaParaTras()
                tentaColocarDiferencaParaFrente()
            senão
                tentaRealocarProjetosVizinhos()
    
    tentaColocarDiferencaParaFrente()
        testaViabilidadeAumentoFinal()
        se (for viável por janela e conflito)
            alocar()
        se (for viável só por janela)
            tentaPostergarProximoProjeto()
            se (for viável postergar)
                alocar()
                
    tentaColocarDiferencaParaTras()
        testaViabilidadeReduzindoInicio()
        se (for viável por janela e conflito)
            alocar()
        se (for viável só por janela)
            tentaAnteciparProximoProjeto()
            se (for viável antecipar)
                alocar()
                
    tentaRealocarProjetosVizinhos()
        verificarIntercecaoJanelaProjeto()
        se (tem intercecção)
            verificaQuantoPossoAnteciparProjetoAnterior()
            verificaQuantoPossoPostergarProjetoPosterior()
            verificaEspacoNecessarioAbrir()
            se (antecipar anterior basta)
                alocar()
            se (postergar posterior basta)
                alocar()
            se (antecipar e postergar basta)
                tentarAnterciparPrimeiro()
                se (viável antecipar primeiro)
                    alocar()
                tentaPostergarPrimeiro()
                se (viável postergar primeiro)
                    alocar()
    
    Opção 1: apenas busca espaço viável: O(n)

    Opção 2: busca espaço e, caso não consiga, tenta movimentar vizinhos imediatos (primeiro da esquerda ou direita): O(n)

    Opção 3: busca espaço e, caso não consiga, tenta movimentar vizinhos em cascata: O(n2)

    Opção 4: busca espaço e, caso não consiga, tenta movimentar vizinhos em cascata apenas para espaço mais promissor: O(n)
    
    Observação: fazer função que percorra todos os elementos (default) e uma que aceite uma lista de índices restritos a serem percorridos.
    Observação: essa lista de índices pode ser um pré-processamento já filtrando apenas locais viáveis
    
- escolha do intervalo

    Dado um intervalo viável, inserir mais no início ou mais no final?

    Fazer escolha que maximize o tamanho do gap que vai sobrar.

- shift_1x0_interrota

    Remove projeto de uma sonda e tenta realocar em outra sonda.

    for (cada projeto alocado)
        remove projeto
        for (outras sondas)
            busca janela viável na sonda
            se (janela existe)
                escolher intervalo para alocação
                inserir
                guardar dados

    Pode ficar pesado por causa da busca: 4 opções de busca.

    Pré-processamentos possíveis:
        - apenas locais com janela viável
        - mais próximos ao projeto removido

- shift_2x0_interrota

    Remove 2 projetos de uma mesma sonda e tenta realocar em outra sonda.

    Mesma coisa que o shift_1x0_interrota, mas para 2 projetos.

- swap_1x1_interrota

    Tenta trocar um projeto de uma sonda com um projeto de outra sonda.

    for (cada sonda)
        for (projetos da sonda)
            for (outras sondas)
                for (projetos da outra sonda)
                    tenta trocar projetos
                    guardar dados

    Tenta trocar projetos: posso fazer em O(1) usando índices e apenas testando viabilidade sem fazer alterações em cascata.

    O que eu fiz no Python: remove projeto, busca janela e insere

    Pré-processamentos possíveis:
        - apenas locais com janela viável
        - projetos próximos
    
- swap_2x1_interrota

    Tenta trocar dois projetos de uma sonda com um projeto de outra sonda.

    Mesma coisa que o swap_1x1_interrota, mas troca 2 (consecutivos) por 1. 

    O que eu fiz no Python:
        - remover os projetos, não necessariamente consecutivos
        - buscar janela em outra sonda para cada projeto

- swap_2x2_interrota

    Tenta trocar dois projetos de uma sonda com dois projetos de outra sonda.

    Mesma coisa que o swap_1x1_interrota, mas troca 2 (consecutivos) por 2 (consecutivos). 

    O que eu fiz no Python:
        - remover os projetos, não necessariamente consecutivos
        - buscar janela em outra sonda para cada projeto

- reinserção_1_intrarota

    Remove projeto de uma sonda e tenta realocar na mesma sonda.

    for (cada projeto alocado)
        remove projeto
        buscar janela viável na mesma sonda
        se (janela existe)
            escolher intervalo para alocação
            inserir
            guardar dados

    Pré-processamentos possíveis:
        - apenas locais com janela viável
        - mais próximos ao projeto removido

- reinserção_2_intrarota

    Remove 2 projetos de uma sonda e tenta realocar na mesma sonda.

    Mesma coisa que reinserção_1_intrarota, mas com 2 projetos.

- inserir_novo_fo

    Tenta alocar algum projeto ainda não alocado.

    for (projetos não alocados)
        for (sondas)
            busca janela viável
            se (janela existe)
                escolher intervalo 
                inserir

    Pré-processamentos possíveis:
        - apenas locais com janela viável
        - mais próximos ao projeto a ser inserido

- swap_1x1_fo

    Tenta trocar um projeto alocado por um projeto ainda não alocado.

    for (projetos alocados)
        for (projetos não alocados)
            tentar trocar projetos
            
    Tenta trocar projetos: posso fazer em O(1) usando índices e apenas testando viabilidade sem fazer alterações em cascata.

    O que eu fiz no Python: remove projeto, busca janela e insere

    Pré-processamentos possíveis:
        - apenas locais com janela viável
        - projetos próximos

- swap_1x2_fo

    Tenta trocar um projeto alocado por dois não alocados.

    Mesma coisa que swap_1x1_fo, mas entram 2 projetos não alocados.

- swap_2x1_fo

    Tenta trocar dois projetos alocados por um não alocado.

    Mesma coisa, mas saem 2 projetos alocados consecutivos.

- swap_2x2_fo

    Tenta trocar 2 projetos alocados por 2 não alocados.

    Mesma coisa, mas saem 2 projetos alocados consecutivos e entram 2 quaisquer.

-----------------------------------
Representações (conceitual e operações desejadas):

- Projeto:

    Classe que representa um projeto exploratório (candidato a ser escolhido e executado).
    
    Membros: nome, coordenada x, coordenada y, bacia, lucro, custo, etc...

- Sonda:

    Classe que representa uma sonda de perfuração (recurso que executa projetos exploratórios).
    
    Membros: nome, coordenada x, coordenada y.

- Alocação:
    
    Classe que representa a vinculação de um projeto (objeto da classe Projeto) a uma determinada sonda (objeto da classe Sonda), num determinado intervalo de tempo (inicio e final).
    
    Membros: Projeto, Sonda, inicio, final, deslocamento.
    
    Observação: o intervalo de tempo contempla o tempo de processamento do projeto alocado, somado ao tempo de deslocamento do projeto alocado em relação a alocação anterior (ou a origem, se não houver alocação anterior).
    
    Observação: guardar também o tempo de deslocamento do projeto alocado em relação a alocação anterior? Com isso, consigo saber se uma alocação é viável.

- Alocações:

    Sequência das alocações (objetos da classe Alocação) ordenadas temporalmente, por sonda.
    
    Ou seja, cada sonda (objeto da classe Sonda) aponta para uma sequência de alocações ordenada.
    
    Observação: para uma determinada sonda, os intervalos das alocações (definidos pelos seus tempos de início e final) tem que ser disjuntos para que não haja conflito.
    
    Operações desejadas (alto nível): buscar, inserir, remover alocação (objeto da classe Alocação) dentro de uma sequência de alocações.
    
    Observação: cada alocação (objeto da classe Alocação), tem um tempo de início e um tempo de final. Esses tempos devem contemplar:
        - O tempo de início deve ser igual ou maior ao tempo que o projeto alocado pode começar a ser executado (se executado).
        - O tempo de final deve ser menor ou igual ao tempo que o projeto alocado tem que terminar de ser executado (se executado).
        - O intervalo definido por estes tempos (início e final) deve ser suficiente para caber o tempo necessário para executar o projeto somado ao tempo de deslocamento do projeto em relação a alocação anterior.

-----------------------------------
Operações (definição, descrição, complexidades):

- Buscar intervalo viável

    Dada a sequência de alocações (objetos da classe Alocação) de uma determinada sonda (objeto da classe Sonda), e um projeto não alocado, o objetivo é buscar um intervalo viável (se existir) para inserir o projeto não alocado dentro da sequência de alocações, sendo um invervalo viável definido por:
        - Intervalo sem conflito (intercecção) com as alocações já feitas (manter conjunto de intervalos disjuntos).
        - Intervalo cujo início é maior ou igual ao tempo em que o projeto pode começar a ser executado (se executado).
        - Intervalo cujo final é menor ou igual ao tempo em que o projeto tem que terminar de ser executado (se executado).
        - intervalo cujo tamanho é maior ou igual do que o tempo de execução do projeto a ser alocado, somado ao tempo de deslocamento do projeto a ser alocado em relação a alocação anterior (ou a origem, se não houver alocação anterior).
    
    Observação: uma alteração na sequência das alocações pode interferir no tempo de deslocamento de algumas alocações. Esse fato deve ser levado em conta na hora de checar a viabilidade, pois uma alteração no tempo de deslocamento de uma alocação pode levar essa alocação a inviabilidade.
    
    Observação: Uma possível expansão da busca é considerar que as alocações já feitas podem sofrer pequenas alterações (adiantar ou atrasar os tempos) para que o intervalo buscado se torne viável.
    
    Complexidade relativa: O(buscar intervalo viável) + O(verificar modificação de tempo de deslocamento)

- Inserir projeto

    Dada a sequência de alocações de uma determinada sonda, um intervalo de tempo viável, e um projeto não alocado, o objetivo é alocar o projeto não alocado na sequência de alocações da sonda, usando o intervalo viável fornecido.
    
    Observação:  É preciso considerar possíveis modificações nos intervalos das alocações que sofrem alterações no tempo de deslocamento, por conta da mudança na ordem das alocações.
    
    Complexidade relativa: O(inserir alocação na sequência de alocações) + O(modificar alocações que sofrem alterações de deslocamento)

- Remover projeto 

    Dada a sequência de alocações de todas as sondas e um projeto alocado a ser removido, o objetivo é desalocar o projeto da sequência de alocações da sonda na qual o projeto está alocado.
    
    Observação: A remoção de um projeto altera a ordem das alocações de uma sequência, o que pode alterar os tempos de deslocamento de algumas alocações. É preciso levar em conta essas modificações na hora de remover um projeto de uma sequência de alocações, até porque essa alteração no tempo de deslocamento pode inviabilizar a remoção.
    
    Complexidade relativa: O(remover alocação na sequência de alocações) + O(modificar alocações que sofrem alterações de deslocamento)

- Trocar projetos

    Dada a sequência de alocações de todas as sondas e dois projetos alocados, o objetivo é trocar a posição dos projetos, se viável.

----------------------------------
Estruturas de dados:

- Opções:
    - vector (ordenado): 
        - buscar: O(log(n))
        - inserir / remover: O(n)
    - list: 
        - buscar: O(n)
        - inserir / remover: O(1)
    - set (balanced tree): 
        - buscar: O(log(n))
        - inserir / remover: O(log(n))
    - unordered set (hash table): 
        - buscar: O(1)
        - inserir / remover: O(1)
    - map (balanced tree): 
        - buscar: O(log(n))
        - inserir / remover: O(log(n))
    - unordered map (hash table): 
        - buscar: O(1)
        - inserir / remover: O(1)
    - interval tree:
        - guarda intervalos
        - observação: trabalhar com intervalos que podem não ser disjuntos
        - objetivo: é otimizada para buscas do tipo "qual dos intervalos tem intercecção com um dado intervalo?"
        - cada node guarda o valor de início, final e o valor médio do intervalo
        - considera o valor médio do intervalo para balancear a árvore
        - ramifica em: intervalos totalmente a esquerda do valor médio, totalmente a direita, e intervalos que contém o valor médio
        - existe outra implementação que guarda o valor máximo das sub-árvores e usa ele nas buscas, balanceando a árvore pelo valor mínimo
        - pré-processamento O(n logn), busca: O(k+logn), memóriaO(n)
    - segment tree
        - guarda intervalos (segmentos)
        - objetivo: usada para buscas de range num array e modificações de elementos nesse mesmo array
        - geralmente a busca é feita por um intervalo específico
        - o node raiz contém o intervalo completo (array completo)
        - cada folha contém um único ponto (único elemento do array) (intervalo elementar)
        - os nodes intermediários representam uniões de intervalos elementares, sendo a união do seu filho da esquerda com o da direita
        - uma vez que a segment tree é construída, ela não pode ter a estrutura modificada, apenas os elementos podem ser modificados
        - os nodes guardam valores auxiliares para responder perguntas que são específicas de cada problema
        - a segment tree geralmente é construída das folhas para a raíz, realizando operações de merge com os valores, dependendo do problema
        - tem várias implementações diferentes para diferentes aplicações
        - usada para resolver o range minimum query problem!
    - range minimum query
        - problema: achar o menor valor num subarray que está contido num array maior
        - soluções: sqrt decomposition, segment tree, sparse table, sqrt tree, ...
    - 2D segment tree
        - para ranges 2D (matrizes)
        - queries 2D e modificações em elementos da matriz 2D

---------------------------------
O QUE TENHO

- 

---------------------------------
TODO:

Anotar lições aprendidas no mestrado

Rever operações das classes implementadas e verificar se posso deixar mais eficiente

Tirar jupyter notebooks do repositório e deixar apenas códigos *.py

Rever gerador de instâncias

Listar produtos que já tenho

Classe construtor de solução ------------------------------------- ...

Classe verificador de solução

Classe para rodar metaheurísticas
    - mult start heuristic

---------------------------------
Observações e dúvidas:

Para poder usar set de uma classe criada por mim, tive que sobreescrever operador de comparação. Tentei primeiro sem sobreescrever e deu erro de compilação. Provavelmente o mesmo acontece para qualquer container que precise comparar quais objetos são maiores/menores (ordenação), como map.

Implementando a interface (classe abstrata) e duas classes derivadas, percebi que todos os métodos definidos como virtuais na classe abstrata precisam também estar definidos nas classes derivadas. Tentei deixar os métodos apenas definidos sem implementação e deu erro. Agora estou fazendo um método por vez nas duas classes.

Todos os métodos virtuais precisam ser sobreescritos nas classes derivadas. Além disso, separando as classes em arquivos diferentes, o escopo na hora de implementar os métodos dentro dos arquivos das classes derivadas deve ser o escopo das classes derivadas (escopo::nomeMetodo).

Os métodos que são virtuais e sobreescritos nas classes derivadas, chamo através de ponteiros, mas se houverem métodos nas classes derivadas que não são virtuais, preciso chamar através da própria instância da classe.

Ao usar iterators, em set e vector posso acessar os valores/objetos com *(iterator), assim como posso acessar os métodos dos objetos com *(iterator).metodo(). Se for um map, posso acessar os valores/objetos com iterator->first/second, mas não posso chamar métodos com iterator->first/second.metodo(). Tive que fazer uma cópia do objeto numa nova instância e aí sim chamar o método.

Para poder chamar métodos herdados da classe abstrata e métodos só de cada classe, instanciei um objeto da classe primeiro e criei um ponteiro apontando para a instância. 

    Interface * ptrClasseA = new A{};
    
    A objetoA{};
    Interface * ptrClasseA = & objetoA;

Porque algumas pessoas usam itr++ e outras pessoas usam ++itr, para incrementar iterators?

Qual a diferença entre declarar variáveis/objetos dentro de um loop ou fora de um loop? Só o escopo?

---------------------------------
HOW TO

- set e map com user defined class

class Test
{
    public:
        int id;

        bool operator<(const Test& t) const
        {
            return (this->id < t.id);
        }
};

----------------------------------
CRONOGRAMA

Janeiro
    - Documentar classes já feitas: ---------------------------------------------------------- OK
    - Rever estruturas de dados das classes já feitas: ---------------------------------------- OK
    - Alterar classe Projeto: ------------------------------------------------------------------ OK
    - Alterar classe Sonda: ------------------------------------------------------------------- OK
    - Escrever classe Intervalo --------------------------------------------------------------- OK
    - Escrever classe Alocacao --------------------------------------------------------------- OK
    - Escrever classe Alocacoes -------------------------------------------------------------- OK
    - Escrever classe Solucao ---------------------------------------------------------------- FAZENDO

Fevereiro
    - Escrever classe verificador de solução
    - Escrever classe construtor heurístico
    - Escrever classe pré-processamento
    - Escrever classe movimentador em vizinhanças
    - Escrever classe busca local
    - Escrever classe executador de metaheurísticas

Março
    - Escrever novas perturbações
    - Adaptar ILS
    - Escrever GRASP ILS
    - Testar alpha e critério guloso
    - Testar hiperparâmetros
    - Realizar experimentos
    - Comparar Python com C++
    
Férias

----------------------------------
LIÇÕES APRENDIDAS

- fazer primeiro uma implementação simples e organizada e, com o tempo, ir rebuscando ela, adicionando novas funcionalidades

- testar a implementação a cada avanço razoável

- fazer uma documentação completa

- marcar coisas a fazer com TODO

- desenhar ideias e algoritmos no papel antes

- escrever pseudo-códigos antes de implementar

- codificar esqueleto das lógicas e algoritmos antes de implementar tudo

- pensar nas representações e  estruturas  de dados

- pensar bem nas operações que se deseja fazer

- modularizar em funções

- de preferência usar orientação a objetos

- dentro das classes, codificar apenas métodos realmente necessários / úteis

- fazer testes e checks de realidade para cada função

- testar cada função assim que termina de implementar ela

- funções grandes / complexas, testar por partes

- fazer testes aleatórios e testes direcionados

- sempre ficar ligado com o escopo de cada variável

- antes de copiar e colar, tenha certeza que o código funciona

- inicializar variáveis com valores padrão

- fazer previsões realistas de cronograma

